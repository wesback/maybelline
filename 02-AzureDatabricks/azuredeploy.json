{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "apiVersions": {
      "type": "object"
    },
    "uniqueNameFix": {
      "type": "string"
    },
    "projectName": {
      "type": "string"
    },
    "bootstrapStorageAccount": {
      "type": "securestring"
    },
    "bootstrapStorageAccountSas": {
      "type": "securestring"
    },
    "bootstrapStorageAccountUrl": {
      "type": "securestring"
    },
    "eventHubNamespaceName": {
      "type": "string",
      "metadata": {
        "description": "Name of the EventHub namespace"
      }
    },
    "eventhubSku": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "Standard"
      ],
      "defaultValue": "Standard",
      "metadata": {
        "description": "The messaging tier for service Bus namespace"
      }
    },
    "skuCapacity": {
      "type": "int",
      "allowedValues": [
        1,
        2,
        4
      ],
      "defaultValue": 1,
      "metadata": {
        "description": "MessagingUnits for premium namespace"
      }
    },
    "isAutoInflateEnabled": {
      "type": "string",
      "defaultValue": "True",
      "allowedValues": [
        "True",
        "False"
      ],
      "metadata": {
        "description": "Enable or disable AutoInflate"
      }
    },
    "maximumThroughputUnits": {
      "type": "int",
      "defaultValue": 10,
      "minValue": 0,
      "maxValue": 20,
      "metadata": {
        "description": "Upper limit of throughput units when AutoInflate is enabled, vaule should be within 0 to 20 throughput units."
      }
    },
    "eventHubName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Event Hub"
      }
    },
    "messageRetentionInDays": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 7,
      "metadata": {
        "description": "How long to retain the data in Event Hub"
      }
    },
    "partitionCount": {
      "type": "int",
      "defaultValue": 4,
      "minValue": 2,
      "maxValue": 32,
      "metadata": {
        "description": "Number of partitions chosen"
      }
    },
    "captureEnabled": {
      "type": "string",
      "defaultValue": "true",
      "allowedValues": [
        "false",
        "true"
      ],
      "metadata": {
        "description": "Enable or disable the Capture feature for your Event Hub"
      }
    },
    "captureEncodingFormat": {
      "type": "string",
      "defaultValue": "Avro",
      "allowedValues": [
        "Avro"
      ],
      "metadata": {
        "description": "The encoding format Eventhub capture serializes the EventData when archiving to your storage"
      }
    },
    "captureTime": {
      "type": "int",
      "defaultValue": 300,
      "minValue": 60,
      "maxValue": 900,
      "metadata": {
        "description": "the time window in seconds for the archival"
      }
    },
    "captureSize": {
      "type": "int",
      "defaultValue": 314572800,
      "minValue": 10485760,
      "maxValue": 524288000,
      "metadata": {
        "description": "the size window in bytes for evetn hub capture"
      }
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Your existing storage account resource id where you want the blobs be archived"
      }
    },
    "blobContainerName": {
      "type": "string",
      "metadata": {
        "description": "Your existing storage container that you want the blobs archived in"
      }
    },
    "workspaceName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Databricks workspace"
      }
    },
    "pricingTier": {
      "type": "string",
      "metadata": {
        "description": "Select Standard or Premium for Databricks"
      }
    }
  },
  "variables": {
    "apiVersions": "[parameters('apiVersions')]",
    "projectName": "[parameters('projectName')]",
    "uniqueNameFix": "[parameters('uniqueNameFix')]",
    "bootstrapStorageAccountName": "[parameters('bootstrapStorageAccount')]",
    "bootstrapStorageAccountId": "[resourceId(subscription().subscriptionId, resourceGroup().name,'Microsoft.Storage/storageAccounts', variables('bootstrapStorageAccountName'))]",
    "location": "[resourceGroup().location]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('apiVersions').deployments]",
      "name": "storage",
      "dependsOn": [],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(uri(deployment().properties.templateLink.uri, 'storage.json'), parameters('bootstrapStorageAccountSas'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "projectName": {
            "value": "[variables('projectName')]"
          },
          "apiVersions": {
            "value": "[variables('apiVersions')]"
          },
          "uniqueNameFix": {
            "value": "[variables('uniqueNameFix')]"
          },
          "storageAccountName": {
            "value": "[parameters('storageAccountName')]"
          },
          "blobContainerName": {
            "value": "[parameters('blobContainerName')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('apiVersions').deployments]",
      "name": "databricks",
      "dependsOn": [],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(uri(deployment().properties.templateLink.uri, 'databricks.json'), parameters('bootstrapStorageAccountSas'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "projectName": {
            "value": "[variables('projectName')]"
          },
          "apiVersions": {
            "value": "[variables('apiVersions')]"
          },
          "uniqueNameFix": {
            "value": "[variables('uniqueNameFix')]"
          },
          "workspaceName": {
            "value": "[parameters('workspaceName')]"
          },
          "pricingTier": {
            "value": "[parameters('pricingTier')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('apiVersions').deployments]",
      "name": "eventhub",
      "dependsOn": [],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(uri(deployment().properties.templateLink.uri, 'eventhub.json'), parameters('bootstrapStorageAccountSas'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "projectName": {
            "value": "[variables('projectName')]"
          },
          "apiVersions": {
            "value": "[variables('apiVersions')]"
          },
          "uniqueNameFix": {
            "value": "[variables('uniqueNameFix')]"
          },
          "eventHubNamespaceName": {
            "value": "[parameters('eventHubNamespaceName')]"
          },
          "eventhubSku": {
            "value": "[parameters('eventhubSku')]"
          },
          "isAutoInflateEnabled": {
            "value": "[parameters('isAutoInflateEnabled')]"
          },
          "maximumThroughputUnits": {
            "value": "[parameters('maximumThroughputUnits')]"
          },
          "eventHubName": {
            "value": "[parameters('eventHubName')]"
          },
          "messageRetentionInDays": {
            "value": "[parameters('messageRetentionInDays')]"
          },
          "partitionCount": {
            "value": "[parameters('partitionCount')]"
          },
          "captureEnabled": {
            "value": "[parameters('captureEnabled')]"
          },
          "captureEncodingFormat": {
            "value": "[parameters('captureEncodingFormat')]"
          },
          "captureTime": {
            "value": "[parameters('captureTime')]"
          },
          "captureSize": {
            "value": "[parameters('captureSize')]"
          },
          "storageAccountResourceId": {
            "value": "[reference('storage').outputs.storageAccountId.value]"
          },
          "blobContainerName": {
            "value": "[parameters('blobContainerName')]"
          }
        }
      }
    }
  ],
  "outputs": {
  }
}